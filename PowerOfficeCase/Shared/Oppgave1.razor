@using System.IO.Pipelines;
@inject IBrregDataService brregDataService
@inject ILogger<Oppgave1> logger


<div class="dropArea @dropClass">
    Drag and drop a csv file, or click to select a file
    <InputFile OnChange="OnInputFileChange"
               @ondragenter="HandleDragEnter"
               @ondragleave="HandleDragLeave"
               disabled="@loadingFile"
               accept=".csv"
               title="Drag and drop csv"
               style=" position: absolute;
                        width: 100%;
                        height: 100%;
                        opacity: 0;
                        cursor: pointer; " />

</div>

@if (loadingFile)
{
    <progress value="@index" max="@size"></progress>
}

<Oppgave2 redraw=@loadingFile />

@code
{
    private bool loadingFile = false;
    private long index;
    private long size;

    string dropClass = string.Empty;
    void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }
    void HandleDragLeave()
    {
        dropClass = string.Empty;
    }

    async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        var tasks = new List<Task<BrregEnhet>>();
        var brregEnhetList = new List<BrregEnhet>();
        var inputCsvOrgList = new List<InputCsvOrg>();
        loadingFile = true;

        try
        {
            using var csvReader = new CsvReader(new StreamReader(args.File.OpenReadStream()), new CsvConfiguration(CultureInfo.CurrentCulture) { Delimiter = ";", CountBytes = true });

            inputCsvOrgList = await csvReader.GetRecordsAsync<InputCsvOrg>().ToListAsync();

            inputCsvOrgList.ForEach(org => tasks.Add(Task.Run(async () => await brregDataService.GetEnhet(org))));
           
            var brregServiceTaskList = Task.WhenAll(tasks);

            brregServiceTaskList.Wait();

            if (brregServiceTaskList.IsCompletedSuccessfully)
            {
                brregServiceTaskList.Result.ToList().ForEach(enhet => brregEnhetList.Add(enhet));

                var filename = $"{Path.GetFileNameWithoutExtension(args.File.Name)}-{DateTime.Now.Ticks.ToString()}.csv";
                Directory.CreateDirectory($"{Environment.CurrentDirectory}\\files");
                var filepath = $"{Environment.CurrentDirectory}\\files\\{filename}";

                using var streamWriter = new StreamWriter(filepath);
                using var csvWriter = new CsvWriter(streamWriter, CultureInfo.InvariantCulture);
                await csvWriter.WriteRecordsAsync(brregEnhetList);
            }
        }
        catch (Exception ex)
        {
            logger.LogWarning(ex.Message);
        }

        index = 0;
        loadingFile = false;
        dropClass = string.Empty;
        await InvokeAsync(StateHasChanged);
    }
}